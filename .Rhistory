################## compute MAE and MASE for different penalties and likelihood #############
measures.list<-list()
coeff.list<-list()
for(penalty in penalties)
{
measures<-NULL
coeff.count.vec<-NULL
coeff.zero.vec<-NULL
for (k in 1:ITER)
{
print(c(penalty,k))
y.test.comp.vec<-NULL
y.pred.comp.vec<-NULL
y.train.comp.vec<-NULL
time.taken<-0
for (i in 1:K)
{
train.idx<-folds$subsets[folds$which!=i,k]
train<-data[train.idx,]
test<-data[-train.idx,]
ptm<-proc.time()
fit<-gooogle(data=train,yvar=yvar,xvars=xvars,zvars=zvars,group=group,dist="negbin",penalty=penalty)
time.taken<-time.taken+round((proc.time()-ptm)[3],3)
z.test<-as.matrix(cbind(1,test[,zvars]))
phi.hat<-1/(1+exp(-z.test%*%fit$coefficients$zero))
x.test<-as.matrix(cbind(1,test[,xvars]))
lam.hat<-exp(x.test%*%fit$coefficients$count)
y.pred<-(1-phi.hat)*lam.hat
y.test<-test[,yvar]
y.train<-train[,yvar]
coeff.count<-fit$coefficients$count
coeff.zero<-fit$coefficients$zero
y.test.comp.vec<-c(y.test.comp.vec,y.test)
y.pred.comp.vec<-c(y.pred.comp.vec,y.pred)
y.train.comp.vec<-c(y.train.comp.vec,y.train)
coeff.count.vec<-rbind(coeff.count.vec,c(penalty=penalty,iteration=k,fold=i,coeff.count))
coeff.zero.vec<-rbind(coeff.zero.vec,c(penalty=penalty,iteration=k,fold=i,coeff.zero))
}
forecast <- structure(list(mean=y.pred.comp.vec, fitted=y.test.comp.vec, x=y.train.comp.vec), class='forecast')
measures<-rbind(measures,c(iter=k,accuracy(forecast,y.test)[2,c(3,6)],time.taken=time.taken))
}
measures.list[[paste(penalty,sep="")]]<-measures
coeff.list[[paste(penalty,sep="")]]<-list(count=coeff.count.vec,zero=coeff.zero.vec)
}
# --------------- Compute same measures for EM ---------------- #
fit.formula<-as.formula(paste(yvar,"~",paste(paste(xvars,collapse="+"),"|",paste(zvars,collapse="+")),sep=""))
coeff.count.vec_EM<-NULL
coeff.zero.vec_EM<-NULL
measures_EM<-NULL
for (k in 1:ITER)
{
print(c("EM_Lasso",k))
y.test.comp.vec<-NULL
y.pred.comp.vec<-NULL
y.train.comp.vec<-NULL
time.taken<-0
for (i in 1:K)
{
train.idx<-folds$subsets[folds$which!=i,k]
train<-data[train.idx,]
test<-data[-train.idx,]
ptm<-proc.time()
fit.em<-zipath(formula=fit.formula,data=train,family="negbin")
time.taken<-time.taken+round((proc.time()-ptm)[3],3)
bic.idx<-which.min(fit.em$bic)
gammahat<-fit.em$coefficients$zero[,bic.idx]
betahat<-fit.em$coefficients$count[,bic.idx]
z.test<-as.matrix(cbind(1,test[,zvars]))
phi.hat<-1/(1+exp(-z.test%*%gammahat))
x.test<-as.matrix(cbind(1,test[,xvars]))
lam.hat<-exp(x.test%*%betahat)
y.pred<-(1-phi.hat)*lam.hat
y.test<-test[,yvar]
y.train<-train[,yvar]
coeff.count_EM<-betahat
coeff.zero_EM<-gammahat
y.test.comp.vec<-c(y.test.comp.vec,y.test)
y.pred.comp.vec<-c(y.pred.comp.vec,y.pred)
y.train.comp.vec<-c(y.train.comp.vec,y.train)
coeff.count.vec_EM<-rbind(coeff.count.vec_EM,c(penalty=penalty,iteration=k,fold=i,coeff.count_EM))
coeff.zero.vec_EM<-rbind(coeff.zero.vec_EM,c(penalty=penalty,iteration=k,fold=i,coeff.zero_EM))
}
forecast <- structure(list(mean=y.pred.comp.vec, fitted=y.test.comp.vec, x=y.train.comp.vec), class='forecast')
measures_EM<-rbind(measures_EM,c(iter=k,accuracy(forecast,y.test)[2,c(3,6)],time=time.taken))
}
coeff.list[["EM"]]<-list(count=coeff.count.vec_EM,zero=coeff.zero.vec_EM)
measures.list[["EM"]]<-measures_EM
########### doc.cv_dist is the final output containing the measures for all methods including EM and coefficients are saved for each fold within each iteration #########################
doc.cv<-list(measures=measures.list,coeff=coeff.list,cv=cv)
doc.cv$measures$grLasso
doc.cv$measures$EM
ITER<- 2
K<-2
set.seed(123)
penalties<-c("grLasso", "grMCP", "grSCAD", "gBridge")
folds <- cvFolds(nrow(data), K = K, R = ITER)
cv<-cbind.data.frame(folds$which,folds$subsets)
names(cv)<-c("fold",paste("iter",1:ITER,sep=""))
################## compute MAE and MASE for different penalties and likelihood #############
measures.list<-list()
coeff.list<-list()
for(penalty in penalties)
{
measures<-NULL
coeff.count.vec<-NULL
coeff.zero.vec<-NULL
for (k in 1:ITER)
{
print(c(penalty,k))
y.test.comp.vec<-NULL
y.pred.comp.vec<-NULL
y.train.comp.vec<-NULL
time.taken<-0
for (i in 1:K)
{
train.idx<-folds$subsets[folds$which!=i,k]
train<-data[train.idx,]
test<-data[-train.idx,]
ptm<-proc.time()
fit<-gooogle(data=train,yvar=yvar,xvars=xvars,zvars=zvars,group=group,dist="negbin",penalty=penalty)
time.taken<-time.taken+round((proc.time()-ptm)[3],3)
z.test<-as.matrix(cbind(1,test[,zvars]))
phi.hat<-1/(1+exp(-z.test%*%fit$coefficients$zero))
x.test<-as.matrix(cbind(1,test[,xvars]))
lam.hat<-exp(x.test%*%fit$coefficients$count)
y.pred<-(1-phi.hat)*lam.hat
y.test<-test[,yvar]
y.train<-train[,yvar]
coeff.count<-fit$coefficients$count
coeff.zero<-fit$coefficients$zero
y.test.comp.vec<-c(y.test.comp.vec,y.test)
y.pred.comp.vec<-c(y.pred.comp.vec,y.pred)
y.train.comp.vec<-c(y.train.comp.vec,y.train)
coeff.count.vec<-rbind(coeff.count.vec,c(penalty=penalty,iteration=k,fold=i,coeff.count))
coeff.zero.vec<-rbind(coeff.zero.vec,c(penalty=penalty,iteration=k,fold=i,coeff.zero))
}
forecast <- structure(list(mean=y.pred.comp.vec, fitted=y.test.comp.vec, x=y.train.comp.vec), class='forecast')
measures<-rbind(measures,c(iter=k,accuracy(forecast,y.test)[2,c(3,6)],time.taken=time.taken))
}
measures.list[[paste(penalty,sep="")]]<-measures
coeff.list[[paste(penalty,sep="")]]<-list(count=coeff.count.vec,zero=coeff.zero.vec)
}
# --------------- Compute same measures for EM ---------------- #
fit.formula<-as.formula(paste(yvar,"~",paste(paste(xvars,collapse="+"),"|",paste(zvars,collapse="+")),sep=""))
coeff.count.vec_EM<-NULL
coeff.zero.vec_EM<-NULL
measures_EM<-NULL
for (k in 1:ITER)
{
print(c("EM_Lasso",k))
y.test.comp.vec<-NULL
y.pred.comp.vec<-NULL
y.train.comp.vec<-NULL
time.taken<-0
for (i in 1:K)
{
train.idx<-folds$subsets[folds$which!=i,k]
train<-data[train.idx,]
test<-data[-train.idx,]
ptm<-proc.time()
fit.em<-zipath(formula=fit.formula,data=train,family="negbin")
time.taken<-time.taken+round((proc.time()-ptm)[3],3)
bic.idx<-which.min(fit.em$bic)
gammahat<-fit.em$coefficients$zero[,bic.idx]
betahat<-fit.em$coefficients$count[,bic.idx]
z.test<-as.matrix(cbind(1,test[,zvars]))
phi.hat<-1/(1+exp(-z.test%*%gammahat))
x.test<-as.matrix(cbind(1,test[,xvars]))
lam.hat<-exp(x.test%*%betahat)
y.pred<-(1-phi.hat)*lam.hat
y.test<-test[,yvar]
y.train<-train[,yvar]
coeff.count_EM<-betahat
coeff.zero_EM<-gammahat
y.test.comp.vec<-c(y.test.comp.vec,y.test)
y.pred.comp.vec<-c(y.pred.comp.vec,y.pred)
y.train.comp.vec<-c(y.train.comp.vec,y.train)
coeff.count.vec_EM<-rbind(coeff.count.vec_EM,c(penalty=penalty,iteration=k,fold=i,coeff.count_EM))
coeff.zero.vec_EM<-rbind(coeff.zero.vec_EM,c(penalty=penalty,iteration=k,fold=i,coeff.zero_EM))
}
forecast <- structure(list(mean=y.pred.comp.vec, fitted=y.test.comp.vec, x=y.train.comp.vec), class='forecast')
measures_EM<-rbind(measures_EM,c(iter=k,accuracy(forecast,y.test)[2,c(3,6)],time=time.taken))
}
coeff.list[["EM"]]<-list(count=coeff.count.vec_EM,zero=coeff.zero.vec_EM)
measures.list[["EM"]]<-measures_EM
########### doc.cv_dist is the final output containing the measures for all methods including EM and coefficients are saved for each fold within each iteration #########################
doc.cv<-list(measures=measures.list,coeff=coeff.list,cv=cv)
doc.cv$measures$grLasso
doc.cv$measures$EM
ITER<- 2
K<-2
set.seed(123)
penalties<-c("grLasso", "grMCP", "grSCAD", "gBridge")
folds <- cvFolds(nrow(data), K = K, R = ITER)
cv<-cbind.data.frame(folds$which,folds$subsets)
names(cv)<-c("fold",paste("iter",1:ITER,sep=""))
################## compute MAE and MASE for different penalties and likelihood #############
measures.list<-list()
coeff.list<-list()
for(penalty in penalties)
{
measures<-NULL
coeff.count.vec<-NULL
coeff.zero.vec<-NULL
for (k in 1:ITER)
{
print(c(penalty,k))
y.test.comp.vec<-NULL
y.pred.comp.vec<-NULL
y.train.comp.vec<-NULL
time.taken<-0
for (i in 1:K)
{
train.idx<-folds$subsets[folds$which!=i,k]
train<-data[train.idx,]
test<-data[-train.idx,]
ptm<-proc.time()
fit<-gooogle(data=train,yvar=yvar,xvars=xvars,zvars=zvars,group=group,dist="negbin",penalty=penalty)
time.taken<-time.taken+round((proc.time()-ptm)[3],3)
z.test<-as.matrix(cbind(1,test[,zvars]))
phi.hat<-1/(1+exp(-z.test%*%fit$coefficients$zero))
x.test<-as.matrix(cbind(1,test[,xvars]))
lam.hat<-exp(x.test%*%fit$coefficients$count)
y.pred<-(1-phi.hat)*lam.hat
y.test<-test[,yvar]
y.train<-train[,yvar]
coeff.count<-fit$coefficients$count
coeff.zero<-fit$coefficients$zero
y.test.comp.vec<-c(y.test.comp.vec,y.test)
y.pred.comp.vec<-c(y.pred.comp.vec,y.pred)
y.train.comp.vec<-c(y.train.comp.vec,y.train)
coeff.count.vec<-rbind(coeff.count.vec,c(penalty=penalty,iteration=k,fold=i,coeff.count))
coeff.zero.vec<-rbind(coeff.zero.vec,c(penalty=penalty,iteration=k,fold=i,coeff.zero))
}
forecast <- structure(list(mean=y.pred.comp.vec, fitted=y.test.comp.vec, x=y.train.comp.vec), class='forecast')
measures<-rbind(measures,c(iter=k,accuracy(forecast,y.test)[2,c(3,6)],time.taken=time.taken))
}
measures.list[[paste(penalty,sep="")]]<-measures
coeff.list[[paste(penalty,sep="")]]<-list(count=coeff.count.vec,zero=coeff.zero.vec)
}
# --------------- Compute same measures for EM ---------------- #
fit.formula<-as.formula(paste(yvar,"~",paste(paste(xvars,collapse="+"),"|",paste(zvars,collapse="+")),sep=""))
coeff.count.vec_EM<-NULL
coeff.zero.vec_EM<-NULL
measures_EM<-NULL
for (k in 1:ITER)
{
print(c("EM_Lasso",k))
y.test.comp.vec<-NULL
y.pred.comp.vec<-NULL
y.train.comp.vec<-NULL
time.taken<-0
for (i in 1:K)
{
train.idx<-folds$subsets[folds$which!=i,k]
train<-data[train.idx,]
test<-data[-train.idx,]
ptm<-proc.time()
fit.em<-zipath(formula=fit.formula,data=train,family="negbin")
time.taken<-time.taken+round((proc.time()-ptm)[3],3)
bic.idx<-which.min(fit.em$bic)
gammahat<-fit.em$coefficients$zero[,bic.idx]
betahat<-fit.em$coefficients$count[,bic.idx]
z.test<-as.matrix(cbind(1,test[,zvars]))
phi.hat<-1/(1+exp(-z.test%*%gammahat))
x.test<-as.matrix(cbind(1,test[,xvars]))
lam.hat<-exp(x.test%*%betahat)
y.pred<-(1-phi.hat)*lam.hat
y.test<-test[,yvar]
y.train<-train[,yvar]
coeff.count_EM<-betahat
coeff.zero_EM<-gammahat
y.test.comp.vec<-c(y.test.comp.vec,y.test)
y.pred.comp.vec<-c(y.pred.comp.vec,y.pred)
y.train.comp.vec<-c(y.train.comp.vec,y.train)
coeff.count.vec_EM<-rbind(coeff.count.vec_EM,c(penalty=penalty,iteration=k,fold=i,coeff.count_EM))
coeff.zero.vec_EM<-rbind(coeff.zero.vec_EM,c(penalty=penalty,iteration=k,fold=i,coeff.zero_EM))
}
forecast <- structure(list(mean=y.pred.comp.vec, fitted=y.test.comp.vec, x=y.train.comp.vec), class='forecast')
measures_EM<-rbind(measures_EM,c(iter=k,accuracy(forecast,y.test)[2,c(3,6)],time=time.taken))
}
coeff.list[["EM"]]<-list(count=coeff.count.vec_EM,zero=coeff.zero.vec_EM)
measures.list[["EM"]]<-measures_EM
########### doc.cv_dist is the final output containing the measures for all methods including EM and coefficients are saved for each fold within each iteration #########################
doc.cv<-list(measures=measures.list,coeff=coeff.list,cv=cv)
doc.cv$measures$EM
library(Gooogle)
build()
require(devtools)
build()
gooogle
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/fit_method.R')
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/main.R')
fit
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/fit_method.R')
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/main.R')
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/main.R')
options(error=recover)
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/main.R')
zvars
test
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/main.R')
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/main.R')
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/main.R')
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/fit_method.R')
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/main.R')
fit
fit
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/fit_method.R')
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/main.R')
measures
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/predict_measures.R')
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/main.R')
measures.mat
measures.mat[complete.cases(measures.mat),]
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/predict_measures.R')
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/main.R')
measures
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/main.R')
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/main.R')
options(warn=-1)
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/main.R')
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/main.R')
measures
class(measures)
3
sink()
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/main.R')
gooogle
?accuracy
?forecast
?accuracy
?forecast
?accuracy
-62*9/5
-62*5/9
train.idx
require(forecast)
require(cplm)
require(HDtweedie)
require(cvTools)
getwd()
i<-1
load(paste(path,"docvisit_CV_negbin_",i,".RData",sep=""))
options(error=NULL)
path<-"C:\\Users\\Saptarshi\\Dropbox\\Gooogle\\Codes\\UAB_Cluster_CV_Analysis\\Results\\"
load(paste(path,"docvisit_CV_negbin_",i,".RData",sep=""))
final$cv
class(final$cv)
cv.result<-NULL
for(i in 1:10)
{
load(paste(path,"docvisit_CV_negbin_",i,".RData",sep=""))
if(i==1)
{
cv.result<-cbind(cv.result,final$cv)
} else {
cv.result<-cbind(cv.result,final$cv[,-1])
}
}
final$cv[,-1]
dim(final$cv[,-1])
i
cbind(cv.result,final$cv)
cbind.data.frame(cv.result,final$cv)
cbind(cv.result,as.matrix(final$cv))
cv.result<-NULL
for(i in 1:10)
{
load(paste(path,"docvisit_CV_negbin_",i,".RData",sep=""))
if(i==1)
{
cv.result<-cbind(cv.result,as.matrix(final$cv))
} else {
cv.result<-cbind(cv.result,as.matrix(final$cv[,-1]))
}
}
cv.result
names(cv.result)
colnames(cv.result)
as.data.frame(cv.result)[1:5,]
row.names(as.data.frame(cv.result)[1:5,])
cv.result<-as.data.frame(cv.result)
names(cv.result)<-c("fold",paste("iter",1:100,sep=""))
names(cv.result)
cv.result[1:5,]
names(cv.result)<-c("fold",paste("iter",1:100))
cv.result[1:5,]
save(cv.result,file=paste(path,"cv.result.doc.RData"))
save(cv.result,file=paste(path,"CV_result_doc.RData"))
load(paste(path,"CV_result_doc.RData"))
load(paste(path,"CV_result_doc.RData"))
path<-"C:\\Users\\Saptarshi\\Dropbox\\Gooogle\\Codes\\UAB_Cluster_CV_Analysis\\Results\\"
load(paste(path,"CV_result_doc.RData"))
cv.result<-NULL
for(i in 1:10)
{
load(paste(path,"docvisit_CV_negbin_",i,".RData",sep=""))
if(i==1)
{
cv.result<-cbind(cv.result,as.matrix(final$cv))
} else {
cv.result<-cbind(cv.result,as.matrix(final$cv[,-1]))
}
}
cv.result<-as.data.frame(cv.result)
names(cv.result)<-c("fold",paste("iter",1:100,sep=""))
save(cv.result,file=paste(path,"CV_result_doc.RData"))
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
options(error=recover)
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
zvars
test
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
test
train
test
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
yvar
test
folds
folds
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
folds
folds[1:%,]
folds[1:5,]
cv
cv[1:5,]
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
i
i
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
i
i
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
i
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
?accuracy
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
result
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
result
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
result
result<-realdata.func(data=data,yvar=yvar,xvars=xvars,zvars=zvars,cv.iter=5,k.fold=2,seedval=123,penalty="gBridge")
result
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
result
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
result
round((proc.time()-time.start)
,3)
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
result
time.start<-proc.time()
round((proc.time()-time.start)[3],3)
time=round((proc.time()-time.start)[3],3)
time
c(round((proc.time()-time.start)[3],3))
as.numeric(round((proc.time()-time.start)[3],3))
35.78/60*100
class(time)
Sys.time()
start<-Sys.time()
Sys.time()-start
as.numeric(Sys.time()-start)
system.time()
proc.time()-ptm
proc.time()-time.start
proc.time()-time.start
result
result<-realdata.func(data=data,yvar=yvar,xvars=xvars,zvars=zvars,cv.iter=5,k.fold=2,seedval=123,penalty="EMLasso")
result<-realdata.func(data=data,yvar=yvar,xvars=xvars,zvars=zvars,cv.iter=5,k.fold=2,seedval=123,penalty="EMLasso")
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
result
result<-realdata.func(data=data,yvar=yvar,xvars=xvars,zvars=zvars,cv.iter=5,k.fold=2,seedval=123,penalty="gBridge")
result
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
result
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
result
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
result
result<-realdata.func(data=data,yvar=yvar,xvars=xvars,zvars=zvars,cv.iter=5,k.fold=2,seedval=123,penalty="grLasso")
result
result<-realdata.func(data=data,yvar=yvar,xvars=xvars,zvars=zvars,cv.iter=5,k.fold=5,seedval=123,penalty="grLasso")
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
cat("/n")
cat("\n")
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/docvisit_CV_Himel.R')
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
result
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
result
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
result
result<-realdata.func(data=data,yvar=yvar,xvars=xvars,zvars=zvars,cv.iter=5,k.fold=5,seedval=123,penalty="EMLasso")
result
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
source('C:/Users/Saptarshi/Dropbox/Gooogle/Codes/Github/GooogleDoc/realdata.R')
result
